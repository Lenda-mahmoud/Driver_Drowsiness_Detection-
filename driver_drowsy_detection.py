# -*- coding: utf-8 -*-
"""Driver_Drowsy_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AEEBeaUsH5Ic8xuBJx1_prP38ZN0VZSP
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("ismailnasri20/driver-drowsiness-dataset-ddd")

print("Path to dataset files:", path)

"""1.Exploring The Dataset

"""

import os

dataset_path = "/root/.cache/kagglehub/datasets/ismailnasri20/driver-drowsiness-dataset-ddd/versions/1"

if os.path.exists(dataset_path):
    print("Dataset downloaded successfully!")
    print(" Files in dataset:", os.listdir(dataset_path))
else:
    print("Dataset not found! Check if it downloaded correctly.")

import os

dataset_folder = "/root/.cache/kagglehub/datasets/ismailnasri20/driver-drowsiness-dataset-ddd/versions/1/Driver Drowsiness Dataset (DDD)"

files = os.listdir(dataset_folder)
print("Files inside dataset folder:", files)

import os

non_drowsy_path = "/root/.cache/kagglehub/datasets/ismailnasri20/driver-drowsiness-dataset-ddd/versions/1/Driver Drowsiness Dataset (DDD)/Non Drowsy"
drowsy_path = "/root/.cache/kagglehub/datasets/ismailnasri20/driver-drowsiness-dataset-ddd/versions/1/Driver Drowsiness Dataset (DDD)/Drowsy"

print("Non Drowsy files:", os.listdir(non_drowsy_path)[:5])
print("Drowsy files:", os.listdir(drowsy_path)[:5])

"""2. Preparing The data before Building The model"""

import os
import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split

dataset_path = "/root/.cache/kagglehub/datasets/ismailnasri20/driver-drowsiness-dataset-ddd/versions/1/Driver Drowsiness Dataset (DDD)"
non_drowsy_path = os.path.join(dataset_path, "Non Drowsy")
drowsy_path = os.path.join(dataset_path, "Drowsy")

image_size = (64, 64)
data = []
labels = []

for file in os.listdir(non_drowsy_path):
    img_path = os.path.join(non_drowsy_path, file)
    img = cv2.imread(img_path)
    img = cv2.resize(img, image_size)
    data.append(img)
    labels.append(0)  

for file in os.listdir(drowsy_path):
    img_path = os.path.join(drowsy_path, file)
    img = cv2.imread(img_path)
    img = cv2.resize(img, image_size)
    data.append(img)
    labels.append(1)  

data = np.array(data, dtype="float32") / 255.0  
labels = np.array(labels)

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

y_train = to_categorical(y_train, num_classes=2)
y_test = to_categorical(y_test, num_classes=2)

print("Data is ready! Number of training images:", X_train.shape[0])

"""3. Model Training"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, LSTM, TimeDistributed, BatchNormalization, Reshape
from tensorflow.keras.optimizers import Adam

#  CNN-LSTM model
model = Sequential([
    # CNN Feature Extraction
    TimeDistributed(Conv2D(32, (3, 3), activation='relu', padding='same'), input_shape=(1, 64, 64, 3)),
    TimeDistributed(MaxPooling2D((2, 2))),
    TimeDistributed(Conv2D(64, (3, 3), activation='relu', padding='same')),
    TimeDistributed(MaxPooling2D((2, 2))),
    TimeDistributed(Conv2D(128, (3, 3), activation='relu', padding='same')),
    TimeDistributed(MaxPooling2D((2, 2))),
    TimeDistributed(Flatten()),

    # Reshape for LSTM
    Reshape((1, -1)),  

    # LSTM for Temporal Analysis
    LSTM(128, return_sequences=False),
    Dropout(0.5),

    # Fully Connected Layers
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(2, activation='softmax')  
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

# Train Model
history = model.fit(X_train.reshape(-1, 1, 64, 64, 3), y_train, validation_data=(X_test.reshape(-1, 1, 64, 64, 3), y_test), epochs=10, batch_size=32)

# Save Model
model.save("drowsiness_detection_model.h5")

print("Model training complete!")

model.save("drowsiness_model.keras")

import cv2
import numpy as np
from collections import deque
from tensorflow.keras.models import load_model
from google.colab.patches import cv2_imshow

# Load trained model
model = load_model("drowsiness_model.keras")

video_path = "/content/istockphoto-618279894-640_adpp_is.mp4"
cap = cv2.VideoCapture(video_path)

image_size = (64, 64)
frame_queue = deque(maxlen=10)  

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_resized = cv2.resize(frame, image_size)
    frame_normalized = frame_resized.astype("float32") / 255.0

    frame_queue.append(frame_normalized)

    if len(frame_queue) == 10:
        input_frame = np.expand_dims(frame_queue[-1], axis=0)  
        input_sequence = np.expand_dims(input_frame, axis=0)   

        prediction = model.predict(input_sequence)

        # Determine class label
        class_label = "Drowsy" if np.argmax(prediction) == 1 else "Non-Drowsy"

        # Display prediction on frame
        color = (0, 0, 255) if class_label == "Drowsy" else (0, 255, 0)
        cv2.putText(frame, class_label, (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    cv2_imshow(frame)

cap.release()

model.summary()

